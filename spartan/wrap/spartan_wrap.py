# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _spartan_wrap.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spartan_wrap', [dirname(__file__)])
        except ImportError:
            import _spartan_wrap
            return _spartan_wrap
        if fp is not None:
            try:
                _mod = imp.load_module('_spartan_wrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spartan_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _spartan_wrap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spartan_wrap.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_spartan_wrap.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_spartan_wrap.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_spartan_wrap.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_spartan_wrap.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_spartan_wrap.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_spartan_wrap.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_spartan_wrap.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_spartan_wrap.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_spartan_wrap.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_spartan_wrap.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_spartan_wrap.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_spartan_wrap.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_spartan_wrap.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_spartan_wrap.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_spartan_wrap.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_spartan_wrap.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _spartan_wrap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class TableIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spartan_wrap.delete_TableIterator
TableIterator.key = new_instancemethod(_spartan_wrap.TableIterator_key,None,TableIterator)
TableIterator.value = new_instancemethod(_spartan_wrap.TableIterator_value,None,TableIterator)
TableIterator.shard = new_instancemethod(_spartan_wrap.TableIterator_shard,None,TableIterator)
TableIterator.done = new_instancemethod(_spartan_wrap.TableIterator_done,None,TableIterator)
TableIterator.next = new_instancemethod(_spartan_wrap.TableIterator_next,None,TableIterator)
TableIterator_swigregister = _spartan_wrap.TableIterator_swigregister
TableIterator_swigregister(TableIterator)

class Table(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _spartan_wrap.Table_swiginit(self,_spartan_wrap.new_Table(*args))
    __swig_destroy__ = _spartan_wrap.delete_Table
Table.id = new_instancemethod(_spartan_wrap.Table_id,None,Table)
Table.num_shards = new_instancemethod(_spartan_wrap.Table_num_shards,None,Table)
Table.get = new_instancemethod(_spartan_wrap.Table_get,None,Table)
Table.update = new_instancemethod(_spartan_wrap.Table_update,None,Table)
Table.flush = new_instancemethod(_spartan_wrap.Table_flush,None,Table)
Table.get_iterator = new_instancemethod(_spartan_wrap.Table_get_iterator,None,Table)
Table.combiner = new_instancemethod(_spartan_wrap.Table_combiner,None,Table)
Table.reducer = new_instancemethod(_spartan_wrap.Table_reducer,None,Table)
Table.sharder = new_instancemethod(_spartan_wrap.Table_sharder,None,Table)
Table.selector = new_instancemethod(_spartan_wrap.Table_selector,None,Table)
Table_swigregister = _spartan_wrap.Table_swigregister
Table_swigregister(Table)

class TableContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    get_context = staticmethod(_spartan_wrap.TableContext_get_context)
    __swig_destroy__ = _spartan_wrap.delete_TableContext
TableContext.id = new_instancemethod(_spartan_wrap.TableContext_id,None,TableContext)
TableContext_swigregister = _spartan_wrap.TableContext_swigregister
TableContext_swigregister(TableContext)

def TableContext_get_context():
  return _spartan_wrap.TableContext_get_context()
TableContext_get_context = _spartan_wrap.TableContext_get_context

class Kernel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spartan_wrap.delete_Kernel
Kernel.args = new_instancemethod(_spartan_wrap.Kernel_args,None,Kernel)
Kernel.table = new_instancemethod(_spartan_wrap.Kernel_table,None,Kernel)
Kernel_swigregister = _spartan_wrap.Kernel_swigregister
Kernel_swigregister(Kernel)

class Worker(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spartan_wrap.delete_Worker
Worker.id = new_instancemethod(_spartan_wrap.Worker_id,None,Worker)
Worker.wait_for_shutdown = new_instancemethod(_spartan_wrap.Worker_wait_for_shutdown,None,Worker)
Worker_swigregister = _spartan_wrap.Worker_swigregister
Worker_swigregister(Worker)

class Master(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spartan_wrap.delete_Master
Master.shutdown = new_instancemethod(_spartan_wrap.Master_shutdown,None,Master)
Master.wait_for_workers = new_instancemethod(_spartan_wrap.Master_wait_for_workers,None,Master)
Master.num_workers = new_instancemethod(_spartan_wrap.Master_num_workers,None,Master)
Master.destroy_table = new_instancemethod(_spartan_wrap.Master_destroy_table,None,Master)
Master.create_table = new_instancemethod(_spartan_wrap.Master_create_table,None,Master)
Master.foreach_shard = new_instancemethod(_spartan_wrap.Master_foreach_shard,None,Master)
Master.foreach_worklist = new_instancemethod(_spartan_wrap.Master_foreach_worklist,None,Master)
Master_swigregister = _spartan_wrap.Master_swigregister
Master_swigregister(Master)


def start_master(*args):
  return _spartan_wrap.start_master(*args)
start_master = _spartan_wrap.start_master

def start_worker(*args):
  return _spartan_wrap.start_worker(*args)
start_worker = _spartan_wrap.start_worker
class Pickler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _spartan_wrap.Pickler_swiginit(self,_spartan_wrap.new_Pickler())
    __swig_destroy__ = _spartan_wrap.delete_Pickler
Pickler.load = new_instancemethod(_spartan_wrap.Pickler_load,None,Pickler)
Pickler.store = new_instancemethod(_spartan_wrap.Pickler_store,None,Pickler)
Pickler_swigregister = _spartan_wrap.Pickler_swigregister
Pickler_swigregister(Pickler)

FATAL = _spartan_wrap.FATAL
ERROR = _spartan_wrap.ERROR
WARN = _spartan_wrap.WARN
INFO = _spartan_wrap.INFO
DEBUG = _spartan_wrap.DEBUG

def set_log_level(*args):
  return _spartan_wrap.set_log_level(*args)
set_log_level = _spartan_wrap.set_log_level

def log(*args):
  return _spartan_wrap.log(*args)
log = _spartan_wrap.log

def cast_to_master(*args):
  return _spartan_wrap.cast_to_master(*args)
cast_to_master = _spartan_wrap.cast_to_master

def cast_to_kernel(*args):
  return _spartan_wrap.cast_to_kernel(*args)
cast_to_kernel = _spartan_wrap.cast_to_kernel


