namespace spartan

struct TypeConstructor {
  i32 type_id;
  string opts;
};

struct CreateTableReq {
  i32 table_type;
  i32 num_shards;
  vector<i32> shards;
  i32 id;

  TypeConstructor sharder;
  TypeConstructor combiner;
  TypeConstructor reducer;
  TypeConstructor selector;
}

struct RunKernelReq {
  string kernel;
  i32 table;
  i32 shard;
  map<string, string> args;
}

struct KV {
  string key;
  string value;
}

struct IteratorReq {
  i32 table;
  i32 shard;
  i32 id;
  i32 count;
}

struct IteratorResp {
  i32 id;
  i32 done;
  vector<KV> results;
  i32 row_count;
}

struct PartitionInfo {
  i32 table;
  i32 shard;
  i64 entries;
  i32 owner;
  i32 dirty;
  i32 tainted;
}

struct TableData {
  i32 source;
  i32 table;
  i32 shard;
  i32 done;
  string table_data;
  vector<KV> kv_data;
  i32 marker;
  i32 missing_key;
};

struct GetRequest {
  string key;
  i32 table;
  i32 shard;
};

struct HostPort {
  string host;
  i32 port;
};

struct ConfigData {
  HostPort master;
  vector<HostPort> workers;
};

struct ShardAssignment {
  i32 table;
  i32 shard;
  i32 worker;
};

struct ShardAssignmentReq {
  vector<ShardAssignment> assign;
};

struct RegisterReq {
  HostPort addr
};

struct WorkerInitReq {
  i32 id
  map<i32, HostPort> workers
};

abstract service Worker {
  initialize(WorkerInitReq req)
  create_table(CreateTableReq req |)
  destroy_table(i32 table_id |)
  get(GetRequest req|TableData resp)
  assign_shards(ShardAssignmentReq req)
  
  run_kernel(RunKernelReq req|)
  get_iterator(IteratorReq req| IteratorResp resp)
  put(TableData req|)
  flush()
  shutdown()
}

abstract service Master {
  fast register_worker(RegisterReq req|)
}


%%
